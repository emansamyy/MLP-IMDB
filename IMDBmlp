{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"IMDBmlp","provenance":[{"file_id":"1fFn5G-5PqAhsnCsmkw0YTjWh1hhrdOw3","timestamp":1640881782471}],"collapsed_sections":[],"authorship_tag":"ABX9TyPMWmYMRo0KoVmIryNn2iUI"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["%load_ext tensorboard"],"metadata":{"id":"l5EdEX_aUQqc","executionInfo":{"status":"ok","timestamp":1640895572630,"user_tz":-120,"elapsed":222,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","execution_count":3,"metadata":{"id":"8JOuAbL7AJ0S","executionInfo":{"status":"ok","timestamp":1640895574012,"user_tz":-120,"elapsed":220,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}}},"outputs":[],"source":["import tensorflow as tf\n","from tensorflow.keras.datasets import mnist\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.utils import to_categorical\n","from keras import models\n","from keras import layers\n","import numpy as np\n","import datetime,os"]},{"cell_type":"code","source":["from keras.datasets import imdb\n"],"metadata":{"id":"oAI1FeZZAbwM","executionInfo":{"status":"ok","timestamp":1640895575769,"user_tz":-120,"elapsed":240,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["(training_data, training_targets), (testing_data, testing_targets) = imdb.load_data(num_words=10000) #the num_words =10000 is\n","# used because only the 10,000 most frequently occurring words in the training data will be kept and the rare words will be discarded to make data of a manageable size\n","data = np.concatenate((training_data, testing_data), axis=0) #the np.concatenate concatenates a sequence of arrays using an existing axis\n","#the arrays are of the same type and the default for the axis is 0\n","targets = np.concatenate((training_targets, testing_targets), axis=0)"],"metadata":{"id":"vC9m68BHEbmx","executionInfo":{"status":"ok","timestamp":1640895582189,"user_tz":-120,"elapsed":5443,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["#for exploring the dataset:\n","print(\"Categories:\", np.unique(targets))\n","length = [len(i) for i in data]\n","print(\"Average Review length:\", np.mean(length))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UcSBY_8XIweh","executionInfo":{"status":"ok","timestamp":1640895583993,"user_tz":-120,"elapsed":222,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}},"outputId":"4f4a34ac-58a6-45b1-bb37-51201ceeb7b7"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Categories: [0 1]\n","Average Review length: 234.75892\n"]}]},{"cell_type":"code","source":["#data preparation\n","#vectoring reviews which means if one review has less than 10k numbers it will\n","#be filled with zeros\n","#this is done because the biggest review has 10k and all inputs to the neural\n","#networn must have the \n","#same size\n","def vectorize(sequences, dimension = 10000):\n","  results = np.zeros((len(sequences), dimension))\n","  for i, sequence in enumerate(sequences):\n","    results[i, sequence] = 1\n","    return results\n"," \n","data = vectorize(data)\n","targets = np.array(targets).astype(\"float32\") #the targets are transformed into floats"],"metadata":{"id":"1w-9W8lnBmph","executionInfo":{"status":"ok","timestamp":1640895587992,"user_tz":-120,"elapsed":2331,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["test_x = data[:10000] #this means the data is split into 10k for testing and 40k for training\n","test_y = targets[:10000]\n","train_x = data[10000:]\n","train_y = targets[10000:]"],"metadata":{"id":"DxTjsyPxBmwb","executionInfo":{"status":"ok","timestamp":1640895589689,"user_tz":-120,"elapsed":293,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["model = models.Sequential() #building the model using Sequential API to create a learning model with layers\n","\n","#Dense is used in layers to make nodes fully connected\n","\n","model.add(layers.Dense(50, activation = \"relu\", input_shape=(10000, )))# the input layer has the input shape of 10k\n","#because reviews are 10k integers long  and outputs 50 , the relu activation function is used because it \n","#yields good results\n","\n","# Hidden Layers\n","model.add(layers.Dropout(0.3, noise_shape=None, seed=None)) #dropout of 30% used to prevent overfitting\n","\n","model.add(layers.Dense(50, activation = \"relu\"))#outputs 50 , the relu activation function is used because it \n","#yields good results\n","\n","model.add(layers.Dropout(0.2, noise_shape=None, seed=None)) #dropout of 20% used to prevent overfitting\n","\n","model.add(layers.Dense(50, activation = \"relu\"))##outputs 50 , the relu activation function is used because it \n","#yields good results\n","\n","# Output- Layer\n","model.add(layers.Dense(1, activation = \"sigmoid\")) #the output is 1 and the sigmoid activation function is used to map the values between 0 and 1\n","\n","\n","\n"],"metadata":{"id":"drDJNBzQCIVM","executionInfo":{"status":"ok","timestamp":1640895591799,"user_tz":-120,"elapsed":216,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}}},"execution_count":9,"outputs":[]},{"cell_type":"code","source":["\n","model.compile(\n"," optimizer = \"adam\",\n"," loss = \"binary_crossentropy\",\n"," metrics = [\"accuracy\"]\n",")\n","#The model is compiled with the loss function as categorical crossentropy \n","#which is generally used for multi-class classification models and produces a one-hot array containing the possible match for each category.\n","#The optimizer is Adam which is a stochastic gradient descent method. The metric used for judging the performance of the model is accuracy.\n","log_dir = \"logs/fitt/\" + datetime.datetime.now().strftime(\"%Y%m%d-%H%M%S\")\n","tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir, histogram_freq=1)\n","\n"],"metadata":{"id":"3o8gyHnvD8YR","executionInfo":{"status":"ok","timestamp":1640895594375,"user_tz":-120,"elapsed":231,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}}},"execution_count":10,"outputs":[]},{"cell_type":"code","source":["model.fit(\n"," train_x, train_y,\n"," epochs= 10,\n"," batch_size = 500,\n"," validation_data = (test_x, test_y),  callbacks=[tensorboard_callback]\n",")\n","\n","# the input data is passed, the numeber of epochs = 10 which represents the hyperparameter that defines the number of time that the algorithm will work\n","# the batch size = 500 which defines the number of samples to work through before updating internal parameters. \n","#verbosity = 1 which means its a progress bar\n","\n","\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"k2lOl-6jEDYq","outputId":"5fd8a22d-f837-4c28-de9f-621f5c55770b","executionInfo":{"status":"ok","timestamp":1640895614419,"user_tz":-120,"elapsed":18157,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}}},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","80/80 [==============================] - 3s 30ms/step - loss: 0.6932 - accuracy: 0.4979 - val_loss: 0.6932 - val_accuracy: 0.4947\n","Epoch 2/10\n","80/80 [==============================] - 1s 18ms/step - loss: 0.6931 - accuracy: 0.5013 - val_loss: 0.6932 - val_accuracy: 0.4947\n","Epoch 3/10\n","80/80 [==============================] - 1s 18ms/step - loss: 0.6932 - accuracy: 0.4973 - val_loss: 0.6932 - val_accuracy: 0.4947\n","Epoch 4/10\n","80/80 [==============================] - 2s 19ms/step - loss: 0.6931 - accuracy: 0.5013 - val_loss: 0.6932 - val_accuracy: 0.4947\n","Epoch 5/10\n","80/80 [==============================] - 2s 19ms/step - loss: 0.6931 - accuracy: 0.5013 - val_loss: 0.6932 - val_accuracy: 0.4947\n","Epoch 6/10\n","80/80 [==============================] - 2s 19ms/step - loss: 0.6932 - accuracy: 0.5013 - val_loss: 0.6932 - val_accuracy: 0.4947\n","Epoch 7/10\n","80/80 [==============================] - 2s 19ms/step - loss: 0.6931 - accuracy: 0.5013 - val_loss: 0.6932 - val_accuracy: 0.4947\n","Epoch 8/10\n","80/80 [==============================] - 1s 18ms/step - loss: 0.6932 - accuracy: 0.5013 - val_loss: 0.6932 - val_accuracy: 0.4947\n","Epoch 9/10\n","80/80 [==============================] - 2s 19ms/step - loss: 0.6932 - accuracy: 0.5013 - val_loss: 0.6932 - val_accuracy: 0.4947\n","Epoch 10/10\n","80/80 [==============================] - 1s 18ms/step - loss: 0.6931 - accuracy: 0.5013 - val_loss: 0.6932 - val_accuracy: 0.4947\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f6cdfcb9650>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["test_results = model.evaluate(test_x, test_y, verbose=1)  # the input data is passed \n","print(f'Test results - Loss: {test_results[0]} - Accuracy: {test_results[1]}%')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L9vtYBBUPMOX","executionInfo":{"status":"ok","timestamp":1640895624136,"user_tz":-120,"elapsed":3294,"user":{"displayName":"Eman Samy","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"00805182972058133935"}},"outputId":"1900faf5-9bcc-4f5b-dc70-d00b79116032"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 4ms/step - loss: 0.6932 - accuracy: 0.4947\n","Test results - Loss: 0.6931651830673218 - Accuracy: 0.49470001459121704%\n"]}]}]}